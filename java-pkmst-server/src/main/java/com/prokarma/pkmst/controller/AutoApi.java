/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.Auto;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaPKMSTServerCodegen", date = "2020-11-14T17:17:21.195Z")

@Api(value = "Auto", description = "the Auto API")
public interface AutoApi {

    @ApiOperation(value = "Add a new auto to the dealer", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "autodealer_auth", scopes = {
            @AuthorizationScope(scope = "write:autos", description = "modify auto in your account"),
            @AuthorizationScope(scope = "read:autos", description = "read your auto")
            })
    }, tags={ "auto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/auto",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addAuto(@ApiParam(value = "Auto object that needs to be added to the autodealer" ,required=true )   @RequestBody Auto body, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Deletes a auto", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "autodealer_auth", scopes = {
            @AuthorizationScope(scope = "write:autos", description = "modify auto in your account"),
            @AuthorizationScope(scope = "read:autos", description = "read your auto")
            })
    }, tags={ "auto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Auto not found") })
    @RequestMapping(value = "/auto/{autoId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAuto(@ApiParam(value = "Auto id to delete",required=true ) @PathVariable("autoId") Long autoId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Find auto by ID", notes = "Returns a single auto", response = Auto.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "auto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Auto.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Auto not found") })
    @RequestMapping(value = "/auto/{autoId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Auto> getAutoById(@ApiParam(value = "ID of auto to return",required=true ) @PathVariable("autoId") Long autoId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Update an existing auto", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "autodealer_auth", scopes = {
            @AuthorizationScope(scope = "write:autos", description = "modify auto in your account"),
            @AuthorizationScope(scope = "read:autos", description = "read your auto")
            })
    }, tags={ "auto", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Auto not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/auto",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateAuto(@ApiParam(value = "Auto object that needs to be updated" ,required=true )   @RequestBody Auto body, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
